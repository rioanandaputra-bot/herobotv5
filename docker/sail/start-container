#!/usr/bin/env bash

set -e

if [ "$SUPERVISOR_PHP_USER" != "root" ] && [ "$SUPERVISOR_PHP_USER" != "sail" ]; then
    echo "You should set SUPERVISOR_PHP_USER to either 'sail' or 'root'."
    exit 1
fi

# Set default values if not provided
WWWUSER=${WWWUSER:-1000}
WWWGROUP=${WWWGROUP:-1000}

if [ ! -z "$WWWUSER" ]; then
    usermod -u $WWWUSER sail
fi

if [ ! -d /.composer ]; then
    mkdir /.composer
fi

chmod -R ugo+rw /.composer

# Fix line endings in .env files if they exist
if [ -f .env ]; then
    sed -i 's/\r$//' .env
fi
if [ -f .env.example ]; then
    sed -i 's/\r$//' .env.example
fi

# Create storage directories with proper permissions first
mkdir -p storage/logs
mkdir -p storage/framework/{cache,sessions,views}
mkdir -p storage/app/public
mkdir -p bootstrap/cache
mkdir -p vendor

# Set proper ownership and permissions BEFORE composer install
chmod -R 775 storage bootstrap/cache
if [ ! -z "$WWWUSER" ] && [ ! -z "$WWWGROUP" ]; then
    chown -R $WWWUSER:$WWWGROUP storage bootstrap/cache vendor
else
    chown -R 1000:1000 storage bootstrap/cache vendor
fi

# Only run composer install if vendor directory is empty or autoload.php doesn't exist
if [ ! -f "vendor/autoload.php" ]; then
    echo "Installing Composer dependencies..."
    
    # Clear composer cache first
    composer clear-cache
    
    # Run composer install with proper flags
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        composer install --no-interaction --prefer-dist --no-scripts --no-plugins
        composer dump-autoload --optimize --no-scripts
    else
        gosu $WWWUSER composer install --no-interaction --prefer-dist --no-scripts --no-plugins
        gosu $WWWUSER composer dump-autoload --optimize --no-scripts
    fi
else
    echo "Vendor directory already exists, skipping composer install"
fi

# Install Node.js dependencies if node_modules doesn't exist
if [ ! -d "node_modules" ]; then
    echo "Installing Node.js dependencies..."
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        npm install
    else
        gosu "${WWWUSER}" npm install
    fi
else
    echo "Node modules already exist, skipping npm install"
fi

# Install WhatsApp server dependencies
if [ ! -d "whatsapp-server/node_modules" ]; then
    echo "Installing WhatsApp server dependencies..."
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        cd whatsapp-server && npm install && cd ..
    else
        gosu "${WWWUSER}" bash -c "cd whatsapp-server && npm install && cd .."
    fi
else
    echo "WhatsApp server dependencies already exist"
fi

# Fix public directory permissions for FrankenPHP
echo "Setting up public directory permissions..."
mkdir -p public
chmod -R 755 public
if [ ! -z "$WWWUSER" ] && [ ! -z "$WWWGROUP" ]; then
    chown -R $WWWUSER:$WWWGROUP public
else
    chown -R 1000:1000 public
fi

# Generate application key only if needed
echo "Checking APP_KEY..."

# Create .env file if it doesn't exist
if [ ! -f .env ]; then
    echo "Creating .env file from .env.example..."
    cp .env.example .env
fi

# Fix .env file permissions
echo "Setting proper permissions for .env file..."
chmod 664 .env
if [ ! -z "$WWWUSER" ] && [ ! -z "$WWWGROUP" ]; then
    chown $WWWUSER:$WWWGROUP .env
else
    chown 1000:1000 .env
fi

# Check if APP_KEY is set
if [ -f .env ]; then
    export $(grep -v '^#' .env | xargs)
fi

if [ -z "$APP_KEY" ] || [ "$APP_KEY" = "" ]; then
    echo "No APP_KEY found. Generating..."
    
    # Generate key using the correct user
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        php artisan key:generate --force
    else
        gosu "${WWWUSER}" php artisan key:generate --force
    fi
    
    # Fix permissions again after key generation
    chmod 664 .env
    if [ ! -z "$WWWUSER" ] && [ ! -z "$WWWGROUP" ]; then
        chown $WWWUSER:$WWWGROUP .env
    else
        chown 1000:1000 .env
    fi
else
    echo "APP_KEY already exists!"
fi

# Wait for database to be ready (only check, don't run migrations)
echo "Checking database connection..."
for i in {1..30}; do
    if php artisan tinker --execute="DB::connection()->getPdo();" 2>/dev/null; then
        echo "Database connection successful"
        break
    fi
    echo "Waiting for database... ($i/30)"
    sleep 2
done

# Only run migrations in development and if they haven't been run
if [ "${APP_ENV:-local}" = "local" ] && [ ! -f "storage/migrations_run" ]; then
    echo "Running migrations (first time setup)..."
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        php artisan migrate --force && touch storage/migrations_run
        php artisan db:seed --force
    else
        gosu $WWWUSER php artisan migrate --force && touch storage/migrations_run
        gosu $WWWUSER php artisan db:seed --force
    fi
fi

echo "Starting supervisord..."
if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec gosu $WWWUSER "$@"
    fi
else
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi
